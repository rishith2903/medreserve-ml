# Simple MedReserve ML Service Dockerfile
# Optimized for quick deployment and minimal issues

FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV NLTK_DATA=/app/nltk_data
ENV PORT=5001

# Copy requirements and install dependencies
COPY requirements-minimal.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-minimal.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p models dataset logs uploads nltk_data

# Download NLTK data during build
RUN python -c "import nltk; import os; os.makedirs('/app/nltk_data', exist_ok=True); nltk.data.path.append('/app/nltk_data'); nltk.download('punkt', download_dir='/app/nltk_data', quiet=True); nltk.download('punkt_tab', download_dir='/app/nltk_data', quiet=True); nltk.download('stopwords', download_dir='/app/nltk_data', quiet=True); nltk.download('wordnet', download_dir='/app/nltk_data', quiet=True)" || echo "NLTK download completed with warnings"

# Train models during build (optional - comment out if you want faster builds)
RUN python train_all_models.py || echo "Model training completed with warnings"

# Expose port
EXPOSE 5001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

# Start the Flask API directly
CMD ["python", "api/ml_api.py"]
